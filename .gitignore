# Byte-compiled / optimized / DLL files<<<<<<< HEAD

__pycache__/# Byte-compiled / optimized / DLL files

*.py[cod]__pycache__/

*$py.class*.py[codz]

*$py.class

# C extensions

*.so# C extensions

*.so

# Virtual environment

.venv/# Distribution / packaging

venv/.Python

env/build/

ENV/develop-eggs/

dist/

# IDE filesdownloads/

.vscode/eggs/

.idea/.eggs/

*.swplib/

*.swolib64/

*~parts/

sdist/

# OS filesvar/

.DS_Storewheels/

.DS_Store?share/python-wheels/

._**.egg-info/

.Spotlight-V100.installed.cfg

.Trashes*.egg

ehthumbs.dbMANIFEST

Thumbs.db

# PyInstaller

# Logs#  Usually these files are written by a python script from a template

*.log#  before PyInstaller builds the exe, so as to inject date/other infos into it.

logs/*.manifest

*.spec

# Environment variables

.env# Installer logs

.env.localpip-log.txt

.env.*.localpip-delete-this-directory.txt



# Model cache (optional - you might want to include the trained model)# Unit test / coverage reports

# Model cache (including trained model for deployment)
# model/*.pklhtmlcov/

.tox/

# Dataset files (large files).nox/

*.csv.coverage

data/.coverage.*

.cache

# Jupyter Notebook checkpointsnosetests.xml

.ipynb_checkpoints/coverage.xml

*.cover

# PyCache*.py.cover

*.pyc.hypothesis/

.pytest_cache/

# Distribution / packagingcover/

.Python

build/# Translations

develop-eggs/*.mo

dist/*.pot

downloads/

eggs/# Django stuff:

.eggs/*.log

lib/local_settings.py

lib64/db.sqlite3

parts/db.sqlite3-journal

sdist/

var/# Flask stuff:

wheels/instance/

*.egg-info/.webassets-cache

.installed.cfg

*.egg# Scrapy stuff:

.scrapy

# Testing

.pytest_cache/# Sphinx documentation

.coveragedocs/_build/

htmlcov/

# PyBuilder

# Documentation.pybuilder/

docs/_build/target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/
=======

venv/
/venv/
*.venv
.venv


pycache/
*.pyc


.idea/
.vscode/


creditcard.csv


model/fraud_detection_model.pkl


.env
*.env
>>>>>>> 72c690c (Initial commit: Setup project structure and basic functionality)
